import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../../styles/Home.module.css';
import { PostCard, Categories, PostWidget, Pagination, Loader } from '../../components';
import { getPosts, getSearchedPosts } from '../../services';
import Link from 'next/link';
import { POSTS_PER_PAGE } from '../../config';

export default function Home( { posts, numPages, currentPage, pageInfo }) {
  const router = useRouter();
  const [searchValue, setSearchValue] = useState("");
  const [searchedPosts, setSearchedPosts] = useState();

  useEffect(() => {
        getSearchedPosts(searchValue)
          .then((result) => setSearchedPosts(result));
    })

  if (router.isFallback) {
    return <Loader />;
  }

  return (
    <div className="container mx-auto px-10 mb-8">
      <Head>
        <title>What is Andy Doing NOW?!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <input 
          type='text'
          onChange={((event) => setSearchValue(event.target.value))}
          placeholder='Search blog posts'
          value={searchValue}
          className="focus:outline-none mb-8 focus:ring-2 focus:ring-indigo-600 w-full rounded-lg border h-10 pl-4 text-lg text-gray-800 border-gray-200"
        />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-12 mb-4">
        <div className="lg:col-span-8 col-span-1">
          {searchedPosts && searchedPosts.length === 0 && <div className="bg-red-500 w-full rounded-md mb-6 px-4 py-2">No post found</div>}
          {searchValue && searchedPosts.map((post) => <PostCard post={post.node} key={post.node.title} />)
            ||
          posts.edges.map((post) => <PostCard post={post.node} key={post.node.title} />)}
        </div>
        <div className="lg:col-span-4 col-span-1">
           <div className="lg:sticky relative lg:top-8">
            <Categories />
           </div>
        </div>
      </div>
      <div>
        {!searchValue && <Pagination numPages={numPages} currentPage={currentPage} pageInfo={pageInfo} />}
      </div>
    </div>
  )
}

export async function getStaticProps({ params }) {
  const page = parseInt(params && params.slug || 1);
  const allPosts = await getPosts();
  const skipIndex = (page - 1) * POSTS_PER_PAGE;
  const posts = (await getPosts(POSTS_PER_PAGE, skipIndex)) || [];
  const numPages = Math.ceil(allPosts.edges.length / POSTS_PER_PAGE);

  return {
    props: { 
      posts:  posts,
      numPages,
      currentPage: page,
      pageInfo: posts.pageInfo,
    }
  }
}

export async function getStaticPaths() {
  const posts = await getPosts();
  const numPages = Math.ceil(posts.edges.length / POSTS_PER_PAGE);
  let paths = [];
  for (let i = 1; i <= numPages; i++) {
    paths.push({
      params: { slug: i.toString() }
    });
  }

  return {
    paths,
    fallback: false
  }
}